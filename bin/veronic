#!/usr/bin/env ruby

require 'rubygems'
require 'optparse'
require 'yaml'

require_relative '../lib/veronic'

file = __FILE__

options = {}

opt_parser = OptionParser.new do |opt|
  opt.banner = "Usage: #{file} COMMAND [OPTIONS]"
  opt.separator  ""
  opt.separator  "Commands"
  opt.separator  "     create: create box"
  opt.separator  "     bootstrap: bootstrap box"
  opt.separator  "     destroy: destroy box"
  opt.separator  "     deploy: deploy box"
  opt.separator  "     deploy_stacks: deploy stacks on box"
  opt.separator  "     deploy_apps: destroy apps on box"
  opt.separator  "     run_tests: tests apps on box"
  opt.separator  "     update_instance_dns: update box dns"
  opt.separator  "     stop: stop box"
  opt.separator  "     start: start box"
  opt.separator  "     list: list boxes"
  opt.separator  ""
  opt.separator  "Options"

  options[:config_file] = ENV['config_file']
  opt.on("-c","--config_file veronic.yml","Use specific config file") do |c|
    options[:config_file] = c
  end

  options[:environment] = ENV['environment']
  opt.on("-E","--environment ENVIRONMENT","Which environment you want box run") do |e|
    options[:environment] = e
  end

  options[:name] = ENV['name']
    opt.on("-N","--node-name NAME","Which node name you want for the box") do |n|
    options[:name] = n
  end

  options[:branch] = ENV['branch']
  opt.on("-b","--branch BRANCH","Which branch you want to run a box for") do |b|
    options[:branch] = b
  end
  
  options[:ssh_user] = ENV['ssh_user']
  opt.on("-u","--ssh_user ssh_user","Which ssh user use to connect box") do |s|
    options[:ssh_user] = s
  end
  
  options[:ssh_port] = ENV['ssh_port']
  opt.on("-p","--ssh_port ssh_port","Which ssh port use to connect box") do |p|
    options[:ssh_port] = p
  end

  options[:identity_file] = ENV['identity_file']
  opt.on("-i","--identity_file identity_file.pem","Which file use by ssh to connect box") do |i|
    options[:identity_file] = i
  end

  options[:role] = ENV['role']
  opt.on("-r","--role role","Which role use to deploy the box") do |r|
    options[:role] = r
  end

  options[:flavor] = ENV['flavor']
  opt.on("-f","--flavor flavor","Which flavor use to deploy the box") do |f|
    options[:flavor] = f
  end

  options[:dnsprovider_zone_name] = ENV['dnsprovider_zone_name']
  opt.on("-d","--dns_zone_name dns_zone_name","Which dns zone use for the box's dns") do |d|
    options[:dnsprovider_zone_name] = d
  end

  options[:security_groups] = ENV['security_groups']
  opt.on("-S","--security_groups security_groups","Which security groups use for the box") do |s|
    options[:security_groups] = s
  end

  options[:deploy_cmd] = ENV['deploy_cmd']
  opt.on("-D","--deploy_cmd security_groups","Which command line us to deploy the box") do |dc|
    options[:deploy_cmd] = dc
  end

  opt.on("-h","--help","help")
end

opt_parser.parse!

case ARGV[0] || ENV['action']
when "create"
	Veronic::Deployer.new(options).create
when "bootstrap"
  Veronic::Deployer.new(options).bootstrap
when "destroy"
	Veronic::Deployer.new(options).destroy
when "deploy"
  Veronic::Deployer.new(options).deploy
when "deploy_stacks"
  Veronic::Deployer.new(options).deploy_stacks
when "deploy_apps"
  Veronic::Deployer.new(options).deploy_apps
when "run_tests"
  Veronic::Deployer.new(options).run_tests
when "update_instance_dns"
	Veronic::Deployer.new(options).update_instance_dns
when "stop"
	Veronic::Deployer.new(options).stop
when "start"
	Veronic::Deployer.new(options).start
when "list"
  Veronic::Deployer.new(options).instances_list
else
	puts opt_parser
end